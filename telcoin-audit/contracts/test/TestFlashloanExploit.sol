// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../staking/StakingModule.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract TestFlashloanExploit {
    StakingModule staking;
    IERC20 tel;

    constructor(address _staking, address _tel) {
        staking = StakingModule(_staking);
        tel = IERC20(_tel);

        tel.approve(_staking, type(uint256).max);
    }

    function pwn() external {
        uint256 bal = tel.balanceOf(address(this));
        require(bal > 0, "FlashloanExploit: balance is 0");

        staking.stake(bal);

        staking.exit();
    }

    function pwn2() external {
        uint256 bal = tel.balanceOf(address(this));
        require(bal > 0, "FlashloanExploit: balance is 0");

        staking.stake(bal);

        staking.partialClaimAndExit(staking.balanceOf(address(this), ""), "");
    }

    function pwn3() external {
        uint256 bal = tel.balanceOf(address(this));
        require(bal > 0, "FlashloanExploit: balance is 0");

        staking.stake(bal);

        staking.fullClaimAndExit("");
    }

    function pwn4() external {
        uint256 bal = tel.balanceOf(address(this));
        require(bal > 2, "FlashloanExploit: balance not more than 2");

        staking.stake(bal);

        staking.partialExit(bal - 1);
    }
}